openapi: 3.0.3
info:
  title: User API
  description: API documentation for user-related routes including authentication, profile management, and job recommendations.
  version: 1.0.0

servers:
  - url: http://localhost:3004/api/v1

tags:
  - name: User
    description: User-related operations

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          example: "609e1287fae8f72a7c8b4567"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        phone:
          type: string
          example: "+1234567890"
        skills:
          type: array
          items:
            type: string
          example: ["JavaScript", "React", "Node.js"]
        avatar:
          type: string
          format: uri
          example: "http://example.com/avatar.jpg"
        bio:
          type: string
          example: "Experienced full-stack developer."
        resume:
          type: string
          format: uri
          example: "http://example.com/resume.pdf"
        appliedJobs:
          type: array
          items:
            type: string
          example: ["jobId1", "jobId2"]
        createdAt:
          type: string
          format: date-time
          example: "2023-01-01T12:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2023-01-10T15:30:00Z"

paths:
  /user/register:
    post:
      tags: [User]
      summary: Register a new user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
                phone:
                  type: string
                avatar:
                  type: string
                  format: binary
              required: [name, email, password, phone]
      responses:
        '201':
          description: User registered successfully
        '400':
          description: Invalid input data

  /user/login:
    post:
      tags: [User]
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required: [email, password]
      responses:
        '200':
          description: Logged in successfully
        '401':
          description: Invalid credentials

  /user/logout:
    post:
      tags: [User]
      summary: Logout user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Logged out successfully

  /user/profile:
    get:
      tags: [User]
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      tags: [User]
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                phone:
                  type: string
                skills:
                  type: string
                  description: Comma-separated list of skills (e.g., "JavaScript,React,Node.js")
                bio:
                  type: string
                avatar:
                  type: string
                  format: binary
      responses:
        '200':
          description: Profile updated successfully

  /user/change-password:
    put:
      tags: [User]
      summary: Change password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  format: password
                newPassword:
                  type: string
                  format: password
              required: [oldPassword, newPassword]
      responses:
        '200':
          description: Password changed successfully

  /user/reset-password:
    post:
      tags: [User]
      summary: Initiate password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required: [email]
      responses:
        '200':
          description: Password reset email sent

  /user/reset-password/{token}:
    put:
      tags: [User]
      summary: Reset password using token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Password reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  format: password
              required: [newPassword]
      responses:
        '200':
          description: Password reset successful

  /user/verify-email/{token}:
    get:
      tags: [User]
      summary: Verify email using token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
          description: Email verification token
      responses:
        '200':
          description: Email verified successfully

  /user/upload-resume:
    post:
      tags: [User]
      summary: Upload resume
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                resume:
                  type: string
                  format: binary
              required: [resume]
      responses:
        '200':
          description: Resume uploaded successfully

  /user/search-history:
    get:
      tags: [User]
      summary: Get user search history
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User search history retrieved successfully

  /user/job-recommendations:
    get:
      tags: [User]
      summary: Get personalized job recommendations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Recommended jobs retrieved successfully

  /user/jobs:
    get:
      tags: [User]
      summary: Search and filter jobs
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: Keyword to search jobs
        - in: query
          name: location
          schema:
            type: string
          description: Filter jobs by location
        - in: query
          name: category
          schema:
            type: string
          description: Filter jobs by category
        - in: query
          name: sort
          schema:
            type: string
          description: Sort order (e.g., salary_asc, date_desc)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Number of results per page
      responses:
        '200':
          description: Job list retrieved successfully

  /user/read-content:
    post:
      tags: [User]
      summary: Extract information from uploaded resume or document
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                document:
                  type: string
                  format: binary
              required: [document]
      responses:
        '200':
          description: Document processed and information extracted successfully
        '400':
          description: Invalid file uploaded
